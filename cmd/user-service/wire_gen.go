// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aragorn-yang/go-camp-03/internal/repository"
	"github.com/aragorn-yang/go-camp-03/internal/repository/ent"
	"github.com/aragorn-yang/go-camp-03/internal/service"
	"github.com/aragorn-yang/go-camp-03/internal/usecase"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

import (
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from wire.go:

func InitUserService() (*service.UserService, error) {
	viper, err := InitConfig()
	if err != nil {
		return nil, err
	}
	client, err := NewDB(viper)
	if err != nil {
		return nil, err
	}
	iUserRepo := repository.NewRepository(client)
	iUserUsecase := usecase.NewUser(iUserRepo)
	userService := service.NewUserService(iUserUsecase)
	return userService, nil
}

// wire.go:

var UserSet = wire.NewSet(service.NewUserService, repository.NewRepository, usecase.NewUser)

func NewDB(v *viper.Viper) (*ent.Client, error) {
	client, err := ent.Open(
		v.Sub("db").GetString("type"),
		v.Sub("db").GetString("dsn"),
	)
	if err != nil {
		return nil, err
	}

	if err := client.Schema.Create(context.Background()); err != nil {
		return nil, err
	}

	return client, nil
}

func InitConfig() (*viper.Viper, error) {
	viper.AddConfigPath("./config")
	viper.SetConfigType("yaml")
	if err := viper.ReadInConfig(); err != nil {
		return nil, err
	}
	return viper.GetViper(), nil
}
